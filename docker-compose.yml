services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U videogen"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  videogen:
    build: .
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - ENVIRONMENT=${ENVIRONMENT}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  celery-worker:
    build: .
    command: >
      celery -A api.celery_app worker
      --loglevel=INFO
      --pool=solo
      --concurrency=1
      --queues=celery
      --hostname=gpu-worker@%h
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - C_FORCE_ROOT=true
      - ENVIRONMENT=${ENVIRONMENT}
      - LOG_LEVEL=${LOG_LEVEL}
      #Optimize for H100
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
      - CUDA_LAUNCH_BLOCKING=0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      videogen:
        condition: service_started
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]
        limits:
          memory: 64G  #Prevent CPU memory issues
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "celery", "-A", "api.celery_app", "inspect", "ping", "-d", "gpu-worker@celery-worker"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 120s  #time for model loading
    restart: unless-stopped

  celery-flower:
    build: .
    command: >
      celery -A api.celery_app flower
      --port=5555
      --basic_auth=${FLOWER_BASIC_AUTH}
      --persistent=true
      --db=/app/flower.db
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - ENVIRONMENT=${ENVIRONMENT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_started
    volumes:
      - flower_data:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/api/workers"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  db-init:
    image: postgres:16-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d:ro
      - ./docker/db-init.sh:/usr/local/bin/db-init.sh:ro
    entrypoint: ["/bin/sh", "/usr/local/bin/db-init.sh"]
    restart: "no"

#Manage Docker containers
  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  flower_data:
    driver: local
  portainer_data:
    driver: local
